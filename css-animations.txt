**********************************
    CSS Animations tutorial
**********************************

1- Transforms (2D & 3D):
   CSS3 Transforms allow us to rotate, translate, scale and skew an element.
   A transformation is an effect that lets an element change shape, size and position.

   =>  2D: 
   There are all methods for 2D Transform effect that we need to know:
   - translate()
   - rotate()
   - scale()
   - skewX()
   - skewY()
   - matrix()

   a) translate() method:
   Moves an element from its current position.
   div {
        -ms-transform: translate(50px, 100px); /* IE 9 */
        -webkit-transform: translate(50px, 100px); /* Safari */
        transform: translate(50px, 100px);
    }

   b) rotate() method:
   Rotates an element clockwise.

   div {
        -ms-transform: rotate(20deg); /* IE 9 */
        -webkit-transform: rotate(20deg); /* Safari */
        transform: rotate(20deg);
    }

   c) scale() method:
   Increases or decreases the size of an element (according to the parameters given for the width and height).
   The following example increases the <div> element to be two times of its original width, and three times of
   its original height: 

   div {
        -ms-transform: scale(2, 3); /* IE 9 */
        -webkit-transform: scale(2, 3); /* Safari */
        transform: scale(2, 3);
    }
   
   d) THe matrix
   The matrix() method combines all the 2D transform methods into one.

   The parameters are as follow: matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())
    Example
    div {
        -ms-transform: matrix(1, -0.3, 0, 1, 0, 0); /* IE 9 */
        -webkit-transform: matrix(1, -0.3, 0, 1, 0, 0); /* Safari */
        transform: matrix(1, -0.3, 0, 1, 0, 0);
    } 

2- Transition:

    div.circle{
        border-radius: 50%;
        height: 60px;
        width: 100px;
        margin: 70px auto;
        padding-top: 40px;
        background-color: pink;
        color: white;
        cursor: pointer;
        -webkit-transition: -webkit-transform 2s;
        transition: transform 1s ease-in-out, background-color 1s;
    }

    div.circle:hover{
        -webkit-transform: scale(1.1, 1.1) rotate(360deg);
        transform: scale(1.1, 1.1) rotate(360deg);
        background-color: palevioletred;
    }

3- keyframes:

    Syntax:
    @keyframes animation_name{
        from{}
        to{}
    }

    @keyframes animation_name{
        0%{}
        ...
        100%{}
    }

    div{
        animation-name: animation_name;
        animation-duration: duration;
    }
    
    Fill mode: 
    animation-fill-mode

    transform-origin:
    Check this link https://developer.mozilla.org/fr/docs/Web/CSS/transform-origin
    La propriété transform-origin permet de modifier l'origine du 
    repère pour les opérations de transformation d'un élément.


    **************************
        Vue.js Annimations
    **************************

    1 - Transition component:
    Wraps arround whatever element we want to animate.
    <transition>
        <element/>
    </transition>

    2- Transition Classes

    There are six classes applied for enter/leave transitions.

    v-enter-from: Starting state for enter. Added before the element is inserted,
    removed one frame after the element is inserted.

    v-enter-active: Active state for enter. Applied during the entire entering phase.
    Added before the element is inserted, removed when the transition/animation finishes.
    This class can be used to define the duration, delay and easing curve for the entering transition.

    v-enter-to: Ending state for enter. Added one frame after the element is inserted 
    (at the same time v-enter-from is removed), removed when the transition/animation finishes.

    v-leave-from: Starting state for leave. Added immediately when a leaving transition is triggered,
    removed after one frame.

    v-leave-active: Active state for leave. Applied during the entire leaving phase. Added immediately
    when a leave transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.

    v-leave-to: Ending state for leave. Added one frame after a leaving transition is triggered
    (at the same time v-leave-from is removed), removed when the transition/animation finishes.

    3- We can also add a name to a transition like this
    <transition name="transition_name">
        <element/>
    </transition>
    ==> its classes are named like this
    //Entering the page                              //Leaving the page
    .transition_name-enter-from                      .transition_name-leave-from
    .transition_name-enter-active                    .transition_name-leave-active    
    .transition_name-enter-to                        .transition_name-leave-to

     .enter-to & leave-from // represent the default proprety of an element in the 
     browser 

     4- Adding CSS KeyFrame animation:
     this is how to add a css keyframe animation

      /* Custom animations */
    @keyframes shake {
       0%{
           transform: translateY(-60px);
           opacity: 0; 
       }
       50%{
           transform: translateY(5 px);
           opacity: 1;
       }
       60%{transform: translateX(8px);}
       70%{transform: translateX(-8px);}
       80%{transform: translateX(4px);}
       90%{transform: translateX(-4px);}
       100%{transform: translateX(0px);}
   }
    
   /* Enter Classes */ 
   /*.notification-enter-from{
       transform: translateY(-60px);
       opacity: 0;
   }*/
   .notification-enter-active{
       animation: shake 0.5s ease;
   }

    5- Transition-group:
    wraps a list of elements that we want to add an animation
     
     <transition-group tag="ul" name="todo-list" appear>
                <li v-for="todo in allTodos" :key="todo.id" @click="deleteTodo(todo.id)">
                    {{todo.title}}
                </li>
     </transition-group>
    
    6- transitioning between 2 elements:
     <transition name="switch" mode="out-in">
        <div  v-if="allTodos.length">
            <transition-group tag="ul" name="todo-list" appear>
                <li v-for="todo in allTodos" :key="todo.id" @click="deleteTodo(todo.id)">
                    {{todo.title}}
                </li>
            </transition-group>
        </div>
        <div v-else>
            Woohoo, empty todo!
        </div>
     </transition>
     
     7- JavaScript Hook:
     


